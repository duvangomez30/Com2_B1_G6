options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: lab_1
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 12]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\n\nclass blk (gr. sync_block ):\n    def __init__\
      \ ( self,additionFlag = True) : \n        gr. sync_block . __init__ (\n    \
      \        self ,\n            name ='e_Acum', \n            in_sig =[ np. float32\
      \ ],\n            out_sig =[ np. float32 ]\n        )\n        self.additionFlag\
      \ = additionFlag\n    def work (self , input_items , output_items ):\n     \
      \   x = input_items [0] \n        y0 = output_items [0] \n        \n       \
      \ y0 [:] = np. cumsum (x)\n        \n        return len (y)\n"
    additionFlag: ''
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('e_Acum', 'blk', [('additionFlag', 'True')], [('0', 'float', 1)],
      [('0', 'float', 1)], '', ['additionFlag'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [488, 336.0]
    rotation: 0
    state: enabled
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nclass blk (gr. sync_block ):\n\n    def __init__\
      \ (self,additionFlag = True): \n        gr. sync_block . __init__ (\n      \
      \      self ,\n            name = 'e_Diff' ,\n            in_sig =[ np. float32\
      \ ],\n            out_sig =[ np. float32 ],  \n    )\n        self.acum_anterior\
      \ = 0\n        self.additionFlag = additionFlag \n    def work (self , input_items\
      \ , output_items ):\n        x = input_items [0] \n        y0 = output_items\
      \ [0] \n        N = len(x)\n        diff = np.cumsum (x) - self.acum_anterior\n\
      \        self.acum_anterior = diff [N -1]\n        y0 [:] = diff\n        return\
      \ len (y0)\n"
    additionFlag: ''
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('e_Diff', 'blk', [('additionFlag', 'True')], [('0', 'float', 1)],
      [('0', 'float', 1)], '', ['additionFlag'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [712, 344.0]
    rotation: 0
    state: enabled
connections: []

metadata:
  file_format: 1
  grc_version: v3.10.11.0-89-ga17f69e7
